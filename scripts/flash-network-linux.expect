#!/usr/bin/expect -f
#
# Configures and flashes Fonera
#

# It configures the same IP addresses as Fonera+ has by default
set FONERA_LISTEN_IP 192.168.1.1
set FONERA_LISTEN_MASK 255.255.255.0
set FLASHER_DEFAULT_IP 192.168.1.254

# TODO Get local IP address and free IP address in a local IP range
set FONERA_CURRENT_IP_MASK 192.168.1.1/24
set FLASHER_CURRENT_IP 192.168.1.254

if { ( [string first "kernel" [lindex $argv 0]] != -1 ) && ( [string first "root" [lindex $argv 1]] != -1 ) } {
	set KERNEL_FILENAME [lindex $argv 0]
	set ROOT_FILENAME [lindex $argv 1]
} elseif { ( [string first "root" [lindex $argv 0]] != -1 ) && ( [string first "kernel" [lindex $argv 1]] != -1 ) } {
	set KERNEL_FILENAME [lindex $argv 1]
	set ROOT_FILENAME [lindex $argv 0]
} else {
	send_user "Invalid program arguments.\n"
	exit 1
}

send_user "Using root image: $ROOT_FILENAME\n"
send_user "Using kernel image: $KERNEL_FILENAME\n"

while { { system ping -c 1 -w 1 -W 1 -o $FONERA_LISTEN_IP} != 0 } {
	send_user "Waiting for router.\n"
}

spawn telnet $FONERA_LISTEN_IP 9000
set timeout 3600
set send_slow { 5 .05 }
expect "enter ^C to abort"
send \003
expect "RedBoot>"
send -s -- "fconfig boot_script_timeout 10\r"
expect {
	"(y/n)?"	{ send -s -- "y\r" ; exp_continue}
	"RedBoot>"
}
send -s -- "fconfig bootp_my_ip $FONERA_LISTEN_IP\r"
expect {
	"(y/n)?"	{ send -s -- "y\r" ; exp_continue }
	"RedBoot>"
}
send -s -- "fconfig bootp_my_ip_mask $FONERA_LISTEN_MASK\r"
expect {
	"(y/n)?"	{ send -s -- "y\r" ; exp_continue }
	"RedBoot>"
}
send -s -- "fconfig bootp_server_ip $FLASHER_DEFAULT_IP\r"
expect {
	"(y/n)?"	{ send -s -- "y\r" ; exp_continue }
	"RedBoot>"
}
send -s -- "fconfig boot_script_data\r"
expect ">>"
send -s -- "fis load -l vmlinux.bin.l7\r"
send -s -- "exec\r"
send -s -- "\r"
expect {
	"(y/n)?"	{ send -s -- "y\r" ; exp_continue }
	"RedBoot>"
}
send -s -- "ip_address -h $FLASHER_CURRENT_IP -l $FONERA_CURRENT_IP_MASK\r"
expect "RedBoot>"
send -s -- "fis init\r"
expect "(y/n)?"
send -s -- "y\r"
expect "RedBoot>"
send -s -- "load -r -b %\{FREEMEMLO\} $ROOT_FILENAME\r"
expect {
	"Can't load"	{ expect "RedBoot>" ; send_user -- "\nCould not load an image file.\n" ; exit 1 }
	"RedBoot>"
}
send -s -- "fis create -f 0xA8030000 -l 0x006F0000 -e 0x00000000 rootfs\r"
expect "RedBoot>"
send -s -- "load -r -b %\{FREEMEMLO\} $KERNEL_FILENAME\r"
expect {
	"Can't load"	{ expect "RedBoot>" ; send_user -- "\nCould not load an image file.\n" ; exit 1 }
	"RedBoot>"
}
send -s -- "fis create -e 0x80041000 -r 0x80041000 vmlinux.bin.l7\r"
expect "RedBoot>"
send -s -- "reset\r"
sleep 1
